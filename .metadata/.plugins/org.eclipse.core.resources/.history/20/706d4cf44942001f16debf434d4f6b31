package chapter2;

import java.util.Arrays;

// 상속 : 객체지향 프로그래밍 특성 중 하나
// 원래 존재하던 클래스를 '확장'하여 재사용할 수 있도록 하는 것
// 코드 중복을 제거하고 확장성을 높일 수 있음
// extends 키워드를 사용하여 확장

// Class Subclass extends SuperClass { ... }
class Human {
	String name;
	int age;

	void sayHello() {
		System.out.println(name + "가 인사를 합니다.");
	}
}

class Korean {
	String address;
	
	void sayHello() {
		System.out.println("안녕하세요.");
	}
}

// Java에서는 단일 상속만 지원함
// 다중 상속에서 발생할 수 있는 다이아몬드 문제가 발생하지 않도록 하기 위함
// 다중 상속과 동일한 효과를 보기위해서 인터페이스 혹은 중첩 상속을 수행함

class Developer extends Human {
	
	String[] skills;
	
	Developer(String name, int age, String[] skills) {
		this.name = name;
		this.age = age;
		this.skills = skills;
	}
	
	
	void develop() {
		System.out.println(name + "가" + Arrays.toString(skills) + "로 개발을 합니다.");
	}
}

class SalesMan extends Human {
	
	int sales;
	
	SalesMan(String name,int age,int sales) {
		this.name = name;
		this.age = age;
		this.sales = sales;
	}
	
	
	void sale() {
		System.out.println(name + "가" + sales + "만큼의 매출을 했습니다.");
	}
}

public class Inheritance {

	public static void main(String[] args) {

		Developer developer1 = new Developer("홍길동", 20, new String[] {"java", "python"});		
		SalesMan salesMan1 = new SalesMan("이영희", 25, 300000);
		
		System.out.println(developer1.age);
		System.out.println(developer1.name);
		System.out.println(developer1.skills);
		developer1.sayHello();
		developer1.develop();
		System.out.println();
		System.out.println(salesMan1.name);
		System.out.println(salesMan1.age);
		System.out.println(salesMan1.sales);
		salesMan1.sayHello();
		salesMan1.sale();
	}

}
