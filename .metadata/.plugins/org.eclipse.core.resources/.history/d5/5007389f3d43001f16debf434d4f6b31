package chapter3;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Package2 {

	public static void main(String[] args) {

		// Collection Framework : Java에서 데이터 구조에 대한 표준화된 기법을 제공
		
		// List : 데이터를 저장할 때 중복을 허용하고 순서가 존재하는 데이터 구조
		// Collection Framework에서 데이터 타입을 지정할 땐 제너릭을 사용하여 지정, 참조형 데이터 타입만 지정 가능
		List<Integer> list;		
		
		// ArrayList 구현 클래스 : 인덱스를 이용한 검색이 빠름
		list = new ArrayList<Integer>();
		
		// LinkedList 구현 클래스 : 추가, 삭제가 빠름
		list = new LinkedList<Integer>();
		
		// add() : List에 요소 추가 
		// 추가할 요소는 제너릭으로 지정한 데이터 타입의 요소이어야 함
		list.add(99);
//		list.add("99"); integer로 타입지정을해놔서 문자열로 추가불가능
		System.out.println(list);

		list.add(99);
		System.out.println(list);
		
		// get() : List의 특정 인덱스 값을 가져옴
		// List의 인덱스 범위를 초과하지 않도록 주의
		// 기본형 데이터 타입의 변수로 반환값을 받을 땐 null이 올 수 있음을 주의
		int number = list.get(0); // 기본형 타입은 null 값이 들어올수없다 참조형 Integer
		System.out.println(number);
		
		// set() : List의 특정 인덱스 요소를 변경
		// List 인덱스 범위를 벗어나는 인덱스를 지정할 수 없음
		list.set(1, -100); // 1번 요소의 값을 변경시켜준다
		System.out.println(list);
		
		// remove() : List의 특정 인덱스 요소를 제거
		list.remove(1); // 선태한 인덱스의 요소를 제거하고 요소만큼 길이도 제거시킨다
		System.out.println(list);
		
		List<String> stringList = new ArrayList<>();
		stringList.add("apple");
		stringList.add("banana");
		System.out.println(stringList);
	}

}
